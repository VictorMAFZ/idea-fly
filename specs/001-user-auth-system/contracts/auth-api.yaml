openapi: 3.0.3
info:
  title: IdeaFly Authentication API
  description: API endpoints for user authentication, registration, and session management
  version: 1.0.0
  contact:
    name: IdeaFly Development Team
    
servers:
  - url: http://localhost:8000
    description: Local development server
  - url: https://api.ideafly.com
    description: Production server

paths:
  /auth/register:
    post:
      summary: Register new user account
      description: Create a new user account with email and password authentication
      operationId: registerUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
            example:
              name: "Juan Pérez"
              email: "juan.perez@example.com"
              password: "securePassword123"
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                token_type: "bearer"
                expires_in: 86400
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error_code: "VALIDATION_ERROR"
                message: "Password must be at least 8 characters long"
        '409':
          description: Email already registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error_code: "EMAIL_EXISTS"
                message: "User with this email already exists"

  /auth/login:
    post:
      summary: User login
      description: Authenticate user with email and password, return JWT token
      operationId: loginUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
            example:
              email: "juan.perez@example.com"
              password: "securePassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error_code: "INVALID_CREDENTIALS"
                message: "Email or password is incorrect"
        '400':
          description: Invalid input format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/google/callback:
    post:
      summary: Google OAuth callback
      description: Handle Google OAuth authorization code and create/login user
      operationId: googleAuthCallback
      tags:
        - Authentication
        - OAuth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleOAuthRequest'
            example:
              code: "4/0AdQt8qh..."
              state: "random_state_string"
      responses:
        '200':
          description: OAuth authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid OAuth code or state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error_code: "INVALID_OAUTH_CODE"
                message: "Invalid or expired OAuth authorization code"
        '500':
          description: OAuth provider error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/me:
    get:
      summary: Get current user profile
      description: Get authenticated user information
      operationId: getCurrentUser
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              example:
                id: "550e8400-e29b-41d4-a716-446655440000"
                name: "Juan Pérez"
                email: "juan.perez@example.com"
                auth_provider: "email"
                is_active: true
                created_at: "2025-10-18T10:30:00Z"
        '401':
          description: Invalid or missing JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error_code: "INVALID_TOKEN"
                message: "Token is invalid or expired"

  /auth/logout:
    post:
      summary: User logout
      description: Logout current user (client-side token removal)
      operationId: logoutUser
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authenticated requests

  schemas:
    UserRegistrationRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: Full name of the user
          example: "Juan Pérez"
        email:
          type: string
          format: email
          maxLength: 254
          description: Valid email address
          example: "juan.perez@example.com"
        password:
          type: string
          minLength: 8
          maxLength: 128
          description: Password (will be hashed before storage)
          example: "securePassword123"

    UserLoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "juan.perez@example.com"
        password:
          type: string
          description: User password
          example: "securePassword123"

    GoogleOAuthRequest:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          description: Authorization code from Google OAuth flow
          example: "4/0AdQt8qh..."
        state:
          type: string
          description: State parameter for CSRF protection
          example: "random_state_string"

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type:
          type: string
          enum: ["bearer"]
          example: "bearer"
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 86400

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          description: Full name of the user
          example: "Juan Pérez"
        email:
          type: string
          format: email
          description: User email address
          example: "juan.perez@example.com"
        auth_provider:
          type: string
          enum: ["email", "google", "mixed"]
          description: Primary authentication method
          example: "email"
        is_active:
          type: boolean
          description: Whether the user account is active
          example: true
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2025-10-18T10:30:00Z"

    ErrorResponse:
      type: object
      properties:
        error_code:
          type: string
          description: Specific error code for programmatic handling
          example: "INVALID_CREDENTIALS"
        message:
          type: string
          description: Human-readable error message
          example: "Email or password is incorrect"
        details:
          type: object
          description: Additional error details (optional)
          additionalProperties: true

tags:
  - name: Authentication
    description: User authentication and session management
  - name: OAuth
    description: Social authentication (Google, etc.)
  - name: Users
    description: User profile and account management